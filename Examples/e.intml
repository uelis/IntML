letw return = fun x -> inl(x)
letw continue = fun x -> inr(x)

(*
letu memo = hack memow
 as {'c}({'a}[int] --o [int]) --o ({'e}['c] --o [int])
*)
letw fixw = fun x ->
  case x of 
    inl(lx) -> 
      let (l,x) = lx in
        case x of
          inl(bq) ->
            let (b,q) = bq in
              inl(fold<'c.1+'b*'c> inr(b,l), inr(q))
        | inr(a) ->
            case unfold<'c.1+'b*'c> l of
              inl(nl) -> 
                 inr(a)
            | inr(cns) ->
               let (hd, tl) = cns in
                 inl(tl, inl(hd, a))
  | inr(q) -> 
     inl(fold<'c.1+'b*'c> inl(), inr(q))

letu fix = hack fixw
 as {mu 'c. 1 + 'b*'c}({'b}'a --o 'a) --o 'a

  (*
{mu 'x. 1 + 'a*'b*'x}({'z}({'y}['a] --o ['b]) --o 'u) --o
{(mu 'x. 1 + 'a*'b*'x) * 'z}({'y}['a] --o ['b]) --o 'u
  *)

letu nil : [int] =
    [0]

letu cons : [int] --> [int] --> [int] =  
  fun x -> fun xs ->
    let [xk] = suspend(x) in
    let [xsk] = suspend(xs) in
    let [id] = [ let id = hashnew in
                 let u = hashput 0 id (inl(xk), inl(xsk)) in id] in
        [id]

letu aaa = (fix (fun l -> fun i -> let [iv] = i in cons [iv] (l [iv+1]))) [0]

letu head =
  fun l -> 
    let [lid] = l in
    let [ht] = [hashget 0 lid] in
      case ht of 
        inl(cell) ->
          let [h] = [let (h,t) = cell in h] in
          let [t] = [let (h,t) = cell in t] in
          case h of
            inl(k) -> 
              let [v] = force(k) in
              let [u] = [hashput 0 lid (inr(v), t)] in
                [v]
          | inr(v) -> 
                [v]
      | inr(notfound) -> [let x = 0 loop inr(0)]

letu tail = 
  fun l -> 
    let [lid] = l in
    let [ht] = [hashget 0 lid] in
      case ht of 
        inl(cell) ->
          let [h] = [let (h,t) = cell in h] in
          let [t] = [let (h,t) = cell in t] in
          case t of
            inl(k) -> 
              let [xsid] = force(k) in
              let [u] = [hashput 0 lid (h, inr(xsid))] in
                [xsid]
          | inr(xsid) -> 
                [xsid]
      | inr(notfound) -> [let x = 0 loop inr(0)]

letu printlist =
  fun l ->
  fun j ->
  let [jv] = j in
  fix (fun p -> 
         fun i ->
         fun l -> 
           let [iv] = i in
           if iv = jv then [()] 
             else
                let [lid] = l in 
                let [xv] = head [lid] in
                let [u] = [print xv] in
                let [u] = [print ""] in
                  p [iv + 1] (tail [lid])) 
    [0] l

letu aux =
  fix (fun aux ->
         fun n ->
           copy n as n1, n2 in
             cons [1] (cons n1 (cons [1] (aux (let [nv] = n2 in [nv + 2])))))

letu eContFrac = (cons [2] (aux [2]))

letw signum = fun x -> if 0 < x then 1 else if x = 0 then 0 else 0-1
letw abs = fun x -> if 0 < x then x else 0-x
letw true : 2 = inl()
letw false : 2 = inr()
letw not : 2 -> 2 =
  fun x -> if x then false else true
letw and : 2 -> 2 -> 2 = 
  fun x -> fun y ->
    if x then y else false
letw or = fun (x : 2) -> fun (y : 2) ->
  if x then true else y

letu ratTrans =
   (fix ((fun ratTrans ->
          fun a -> fun b -> fun c -> fun d -> fun xs ->
             let [av] = a in
             let [bv] = b in
             let [cv] = c in
             let [dv] = d in
             let [qv] = [if dv = 0 then 1 else bv/dv] in
             let [c] = [
              and (or (signum cv = signum dv) (abs cv < abs dv)) 
                      (and ((cv+dv)*qv < av+bv+1) 
                           (av+bv < (cv+dv)*qv + (cv+dv)))] in
             if c then
                   cons [qv] (ratTrans [cv] [dv] [av-qv*cv] [bv-qv*dv] xs)
             else 
                   copy xs as xs1, xs2 in
                   let [xv] = head xs1 in
                    ratTrans [bv] [av+xv*bv] [dv] [cv+xv*dv] (tail xs2)
   )))

letu toDigits = 
   fix ((fun toDigits ->
          fun l ->
            let [lid] = l in
            cons (head [lid]) (toDigits (ratTrans [10] [0] [0] [1] (tail [lid])))))

letu e = memo (toDigits eContFrac)

letu ttt = printlist e [110]
letu ttu = printlist eContFrac [2100]
